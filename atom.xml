<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Dengliming's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://dengliming.github.io//"/>
  <updated>2015-12-26T15:10:09.000Z</updated>
  <id>https://dengliming.github.io//</id>
  
  <author>
    <name><![CDATA[dengliming]]></name>
    <email><![CDATA[liming.deng@foxmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用ngrok将本地Web服务映射到外网]]></title>
    <link href="https://dengliming.github.io/2015/12/26/ngrok/"/>
    <id>https://dengliming.github.io/2015/12/26/ngrok/</id>
    <published>2015-12-26T14:35:51.000Z</published>
    <updated>2015-12-26T15:10:09.000Z</updated>
    <content type="html"><![CDATA[<p>利用ngrok可以通过外网访问本地项目，这个对我们是非常有用的，比如我们平常开发的网站还没更新到线上，但是又需要通过外网可以访问到本地应用，方便测试。</p>
<p>该工具使用方法非常简单。</p>
<p>首先需要下载客户端</p>
<p>下载地址：<a href="http://www.tunnel.mobi/" target="_blank" rel="external">http://www.tunnel.mobi/</a></p>
<p><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122601.jpg" alt=""></p>
<p>下载以上两个文件。然后放到同一个目录</p>
<p><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122602.png" alt=""></p>
<p>然后在该目录打开命令行窗口输入命令：<br>ngrok -config ngrok.cfg -subdomain dts 80<br>dts为配置的子域名 80是本地项目端口</p>
<p>本地效果：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122603.png" alt=""></p>
<p>公网效果：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122604.png" alt=""></p>
<p>注：最近发现<a href="http://www.tunnel.mobi/" target="_blank" rel="external">http://www.tunnel.mobi/</a> 已经访问不了 不过有另外备用的可以使用：<a href="http://qydev.com/" target="_blank" rel="external">http://qydev.com/</a><br>这个微信demo开发有很大帮助。mark下</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>利用ngrok可以通过外网访问本地项目，这个对我们是非常有用的，比如我们平常开发的网站还没更新到线上，但是又需要通过外网可以访问到本地应用，方便测试。</p>
<p>该工具使用方法非常简单。</p>
<p>首先需要下载客户端</p>
<p>下载地址：<a href="htt]]>
    </summary>
    
      <category term="ngrok" scheme="https://dengliming.github.io/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis之sds动态字符串]]></title>
    <link href="https://dengliming.github.io/2015/07/06/redis%E4%B9%8Bsds%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://dengliming.github.io/2015/07/06/redis之sds动态字符串/</id>
    <published>2015-07-06T15:30:51.000Z</published>
    <updated>2015-10-28T15:10:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redis之sds动态字符串">redis之sds动态字符串</h1><hr>
<h2 id="redis定义">redis定义</h2><p>redis源码中sds的结构是这样的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span><br><span class="line"> * 保存字符串对象的结构</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">struct</span> sdshdr &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>buf最后一个字节保存了空字符’\0’遵循c字符串以空字符结尾的惯例，保存空字符的1字节空间是不记在len里面</p>
<h2 id="api之sdslen">api之sdslen</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 返回 sds 实际保存的字符串的长度</span><br><span class="line"> *</span><br><span class="line"> * T = O(1)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">sdslen</span><span class="params">(<span class="keyword">const</span> sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh = (<span class="keyword">void</span>*)(s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line">    <span class="keyword">return</span> sh-&gt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中要理解这段代码struct sdshdr <em>sh = (void</em>)(s-(sizeof(struct sdshdr)));</p>
<p>需要回顾下c的一些基础知识：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node &#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> str[];</span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">char</span>*) = <span class="number">4</span></span><br><span class="line"><span class="keyword">sizeof</span>(Node*) = <span class="number">4</span></span><br><span class="line"><span class="keyword">sizeof</span>(Node2) = <span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<p>前两个是指针所占的字节是由系统的寻址能力有关，以上是32位的，后面那个<br>int len占4个字节，str[]暂未分配内存</p>
<p>然后看下sds初始化方法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdsnewlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *init, size_t initlen)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">if</span> (init) &#123;</span><br><span class="line">        <span class="comment">// zmalloc 不初始化所分配的内存</span></span><br><span class="line">        sh = zmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class="line">        sh = zcalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存分配失败，返回</span></span><br><span class="line">    <span class="keyword">if</span> (sh == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置初始化长度</span></span><br><span class="line">    sh-&gt;len = initlen;</span><br><span class="line">    <span class="comment">// 新 sds 不预留任何空间</span></span><br><span class="line">    sh-&gt;<span class="built_in">free</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">if</span> (initlen &amp;&amp; init)</span><br><span class="line">        <span class="built_in">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class="line">    <span class="comment">// 以 \0 结尾</span></span><br><span class="line">    sh-&gt;buf[initlen] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>*)sh-&gt;buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里面返回sds的地址只返回了buf部分，所以前面如果我们需要获取sds的长度len需要减去(sizeof(struct sdshdr))个字节</p>
<h2 id="api之sdsfree">api之sdsfree</h2><p>释放给定的sds<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfree</span><span class="params">(sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == NULL) <span class="keyword">return</span>;</span><br><span class="line">    zfree(s-<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="api之sdsclear">api之sdsclear</h2><p>在不释放 SDS 的字符串空间的情况下，重置 SDS 所保存的字符串为空字符串。T = O(1)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsclear</span><span class="params">(sds s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出 sdshdr</span></span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新计算属性</span></span><br><span class="line">    sh-&gt;<span class="built_in">free</span> += sh-&gt;len;</span><br><span class="line">    sh-&gt;len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将结束符放到最前面（相当于惰性地删除 buf 中的内容）</span></span><br><span class="line">    sh-&gt;buf[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之所以sh-&gt;free += sh-&gt;len是因为redis的惰性空间释放，也就是当sds缩短时程序并没有立即回收缩短的字节，而是使用free属性记录起来，等待将来的使用，这样的好处就是下一次扩展sds时，就可以直接使用这些未使用的空间，不需要重新分配内存。</p>
<h2 id="api之sdscat">api之sdscat</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdscat</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdscatlen(s, t, <span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscatlen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">void</span> *t, size_t len)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原有字符串长度</span></span><br><span class="line">    <span class="keyword">size_t</span> curlen = sdslen(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展 sds 空间</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    s = sdsMakeRoomFor(s,len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存不足？直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (s == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制 t 中的内容到字符串后部</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line">    <span class="built_in">memcpy</span>(s+curlen, t, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新属性</span></span><br><span class="line">    sh-&gt;len = curlen+len;</span><br><span class="line">    sh-&gt;<span class="built_in">free</span> = sh-&gt;<span class="built_in">free</span>-len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新结尾符号</span></span><br><span class="line">    s[curlen+len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回新 sds</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<blockquote>
<ul>
<li><a href="http://redisbook.com/" target="_blank" rel="external">redis设计与实现</a></li>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">注释的redis源码</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="redis之sds动态字符串">redis之sds动态字符串</h1><hr>
<h2 id="redis定义">redis定义</h2><p>redis源码中sds的结构是这样的：<br><figure class="highlight cpp"><table>]]>
    </summary>
    
      <category term="redis" scheme="https://dengliming.github.io/tags/redis/"/>
    
      <category term="sds" scheme="https://dengliming.github.io/tags/sds/"/>
    
      <category term="redis" scheme="https://dengliming.github.io/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo搭建博客]]></title>
    <link href="https://dengliming.github.io/2015/06/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://dengliming.github.io/2015/06/21/Hexo搭建博客/</id>
    <published>2015-06-21T13:19:51.000Z</published>
    <updated>2015-12-26T15:10:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="今天终于开通了我的博客，这是一个全新的开始。">今天终于开通了我的博客，这是一个全新的开始。</h1><p>下面是我搭建独立博客的过程</p>
<p>准备工作：<br>Nodejs安装<br>Git安装<br>Hexo配置</p>
<p>nodejs环境配置可参考资料<a href="http://www.cnblogs.com/bicabo/p/3630777.html" target="_blank" rel="external">nodejs环境配置</a></p>
<p>Hexo安装，要用全局安装，加-g参数</p>
<blockquote>
<p>E:> npm install -g hexo</p>
</blockquote>
<p>如果执行这个命令出现<br>npm WARN optional dep failed, continuing fsevents@0.3.6<br>则改为使用</p>
<blockquote>
<p> E:>npm install —unsafe-perm —verbose -g hexo</p>
</blockquote>
<p>安装成功之后可查看hexo版本</p>
<blockquote>
<p>E:>hexo version<br>hexo-cli: 0.1.7<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 1.0<br>node: 0.10.32<br>v8: 3.14.5.9<br>ares: 1.9.0-DEV<br>uv: 0.10.28<br>zlib: 1.2.3<br>modules: 11<br>openssl: 1.0.1i</p>
</blockquote>
<p>安装好后，我们就可以使用Hexo创建项目了</p>
<blockquote>
<p>E:\nodebook&gt;hexo init blog<br>INFO  Copying data to E:\nodebook\blog<br>INFO  You are almost done! Don’t forget to run ‘npm install’ before you start blogging with Hexo!</p>
</blockquote>
<p>我们看到当前在目录下，出现了blog文件夹，包括初始化的文件。<br>进入blog目录，启动Hexo服务器（启动之前需执行npm install）</p>
<blockquote>
<p>E:\nodebook&gt;cd blog<br> E:\nodebook&gt;npm install<br>E:\nodebook&gt;hexo server</p>
</blockquote>
<p>启动成功后可以在浏览器输入：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 即可访问</p>
<p>接下来发布到github</p>
<ul>
<li>需要在<a href="https://github.com/" target="_blank" rel="external">github</a>上注册一个账号</li>
<li>建立与你用户名对应的仓库，仓库名必须为your_user_name.github.com</li>
<li><p>添加ssh公钥</p>
<p>前两步比较简单，最终建成的仓库如下：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506215.png" alt=""></p>
</li>
</ul>
<p>第三步：添加ssh公钥</p>
<p>输入以下指令（邮箱就是你注册Github时候的邮箱）</p>
<blockquote>
<p>ssh-kengen -t rsa -C “1196767447@qq.com”</p>
</blockquote>
<p>然后键入以下指令：</p>
<blockquote>
<p>ssh-agent -s</p>
</blockquote>
<p>继续输入指令：</p>
<blockquote>
<p>ssh-add ~/.ssh/id_rsa</p>
</blockquote>
<p>如果出现Could not open a connection to your authentication agent.<br>先输入</p>
<blockquote>
<p>$ eval <code>ssh-agent</code><br>Agent pid 11368</p>
</blockquote>
<p>然后再输入：</p>
<blockquote>
<p>$ ssh-add<br>Identity added: /c/Users/DLM/.ssh/id_rsa (/c/Users/DLM/.ssh/id_rsa)</p>
</blockquote>
<p>复制ssh公钥</p>
<blockquote>
<p>$ clip&lt; ~/.ssh/id_rsa.pub</p>
</blockquote>
<p>然后到github上面，点击Settings<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506211.png" alt=""></p>
<p>点击SSH keys<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506212.jpg" alt=""></p>
<p>点击Add SSH key<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506213.png" alt=""></p>
<p>输入Title，作为这个key的描述，然后这个Key就是刚刚拷贝的，你直接粘贴就好<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506214.png" alt=""></p>
<p>最后测试一下是否成功了</p>
<blockquote>
<p>$ ssh -T git@github.com<br>The authenticity of host ‘github.com (192.30.252.129)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yew<br>Please type ‘yes’ or ‘no’: yes<br>Warning: Permanently added ‘github.com,192.30.252.129’ (RSA) to the list of know<br>n hosts.<br>Hi dengliming! You’ve successfully authenticated, but GitHub does not provide sh<br>ell access.</p>
</blockquote>
<p>这个说明已经成功了。</p>
<p>最后进入blog目录，生成静态页面</p>
<blockquote>
<p>hexo clean</p>
</blockquote>
<p>最后，通过命令进行部署。</p>
<blockquote>
<p>hexo deploy</p>
</blockquote>
<p>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：<br><a href="http://yourname.github.io/" target="_blank" rel="external">http://yourname.github.io/</a></p>
<p>以后发布博客的部署步骤<br>hexo clean<br>hexo generate<br>hexo deploy</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="今天终于开通了我的博客，这是一个全新的开始。">今天终于开通了我的博客，这是一个全新的开始。</h1><p>下面是我搭建独立博客的过程</p>
<p>准备工作：<br>Nodejs安装<br>Git安装<br>Hexo配置</p>
<p>nodejs环境配置可参考]]>
    </summary>
    
      <category term="开始" scheme="https://dengliming.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
      <category term="日志" scheme="https://dengliming.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>