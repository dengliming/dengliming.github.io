<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Dengliming's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://dengliming.github.io//"/>
  <updated>2016-01-16T14:38:02.000Z</updated>
  <id>https://dengliming.github.io//</id>
  
  <author>
    <name><![CDATA[dengliming]]></name>
    <email><![CDATA[liming.deng@foxmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ajax http post to https]]></title>
    <link href="https://dengliming.github.io/2016/01/16/ajax-http-post-to-https/"/>
    <id>https://dengliming.github.io/2016/01/16/ajax-http-post-to-https/</id>
    <published>2016-01-16T14:19:51.000Z</published>
    <updated>2016-01-16T14:38:02.000Z</updated>
    <content type="html"><![CDATA[<p>在本地同一个域http页面请求https页面，其实已经跨域了，我们知道出于安全问题的考虑，浏览器是不允许跨域访问的，那么如果使用ajax来实现跨域访问呢，开发中常用的解决方法很多，比较常用的是JSONP方法、window.name，JSONP方法是一种非官方方法，而且这种方法只支持GET方式，不如POST方式安全。即使使用jquery的jsonp方法，type设为POST，也会自动变为GET</p>
<p>经查资料：<br>如果跨域使用POST方式，可以使用创建一个隐藏的iframe来实现，但这样会比较麻烦<br>但是通过服务端设置Access-Control-Allow-Origin来实现跨越访问比较简单</p>
<p>在这里只对Access-Control-Allow-Origin做个小测试<br>先新建两个jsp页面，一个是test.jsp用来发送请求，accept.jsp用来接收请求<br>test.jsp<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</span><br><span class="line">	pageEncoding="UTF-8"%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</span><br><span class="line">&lt;script src="js/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form id="form"&gt;</span><br><span class="line">		&lt;input name="t" value="123"/&gt;</span><br><span class="line">		&lt;input type="button" value="submit" onclick="ajaxSubmit(this)"/&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	function ajaxSubmit(frm) &#123;</span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">		    url: "/accept.jsp",</span><br><span class="line">		    type: "POST",</span><br><span class="line">		    data: $("#form").serialize(),</span><br><span class="line">		    success: function(result) &#123;</span><br><span class="line">		    	console.log(result);</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>accept.jsp<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	out.println(<span class="string">"success--------&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p>
<p>这里accept页面简单的输出success</p>
<p>在浏览器上看看页面效果：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/78892217.png" alt=""><br>点击submit之后 查看浏览器控制台 正常返回seccess<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/78924244.png" alt=""></p>
<p>那么假设把test.jsp中form的提交的url改成https之后呢。PS：具体本地怎么测试https请参考另一篇<a href="https://dengliming.github.io/2016/01/16/openssl-generate-certificate/">本地openssl生成证书</a></p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">ajaxSubmit</span><span class="params">(frm)</span> </span>&#123;</span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">		    url: <span class="string">"https://localhost/accept.jsp"</span>,</span><br><span class="line">		    type: <span class="string">"POST"</span>,</span><br><span class="line">		    data: $(<span class="string">"#form"</span>).serialize(),</span><br><span class="line">		    success: function(result) &#123;</span><br><span class="line">		    	console.log(result);</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>再看看浏览器效果：出现No ‘Access-Control-Allow-Origin’ header is present on the requested resource<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/79044598.png" alt=""></p>
<p>然后在accept.jp加入headerAccess-Control-Allow-Origin</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">	out.println(<span class="string">"success--------&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>表示允许任何域名跨域访问 一般线上不这么用，会指定某个域名<br>最后来看下效果：请求成功返回<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/79534410.png" alt=""></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在本地同一个域http页面请求https页面，其实已经跨域了，我们知道出于安全问题的考虑，浏览器是不允许跨域访问的，那么如果使用ajax来实现跨域访问呢，开发中常用的解决方法很多，比较常用的是JSONP方法、window.name，JSONP方法是一种非官方方法，而且这种方]]>
    </summary>
    
      <category term="ajax" scheme="https://dengliming.github.io/tags/ajax/"/>
    
      <category term="http" scheme="https://dengliming.github.io/tags/http/"/>
    
      <category term="https" scheme="https://dengliming.github.io/tags/https/"/>
    
      <category term="ajax" scheme="https://dengliming.github.io/categories/ajax/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[本地openssl生成证书]]></title>
    <link href="https://dengliming.github.io/2016/01/16/openssl-generate-certificate/"/>
    <id>https://dengliming.github.io/2016/01/16/openssl-generate-certificate/</id>
    <published>2016-01-16T06:19:51.000Z</published>
    <updated>2016-01-16T07:12:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在本地环境测试网站HTTPS是否能正确工作时同样需要用到证书，但由于本地环境一般没有公网IP，没有固定域名等原因，所以就会考虑采用非正式的证书，即会选择使用自签名证书(Self-signed SSL Certificate)</p>
<h2 id="一、环境准备：">一、环境准备：</h2><blockquote>
<ul>
<li><a href="http://www.activestate.com/ActivePerl" target="_blank" rel="external">ActivePerl下载</a></li>
<li><a href="http://www.openssl.org/source/" target="_blank" rel="external">openssl下载</a></li>
<li><a href="http://download.microsoft.com/download/e/7/7/e777851c-c1a4-4979-86b3-6886953b32e9/VS2008ProEdition90DayTrialCHSX1435983.iso" target="_blank" rel="external">microsoft visual studio 2008下载</a></li>
</ul>
</blockquote>
<h3 id="1-ActivePerl_安装">1.ActivePerl 安装</h3><p>下载msi文件之后直接安装，这里我安装到了D盘<br>然后cd进入D:\Perl64\eg目录执行example.pl，如果出现Hello from ActivePerl!则说明已经安装成功</p>
<h3 id="2-VS2008安装">2.VS2008安装</h3><p><a href="http://wenku.baidu.com/link?url=DYxk_ZCRrtHFBcBVmCLdstYBbseH0hkE_bvnBIdphIP0LE8Not725dV4xiJw2-WxD_O-zx7D2ipNZ0Nji9O8lkw40SGKaDXL4PPT-BMKwHG" target="_blank" rel="external">可以参考</a></p>
<h3 id="3-openssl安装">3.openssl安装</h3><p>下载之后解压到D:\openssl-1.0.1c<br>然后cd 到D:\openssl-1.0.1c目录</p>
<p>执行以下命令<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">perl Configure VC-WIN32 -DOPENSSL_USE_IPV6=0 --prefix=D:\openssl-1.0.1c</span><br><span class="line">ms\do_ms</span><br><span class="line">nmake -f ms/ntdll.mak</span><br><span class="line">nmake -f ms/ntdll.mak test</span><br><span class="line">nmake -f ms/ntdll.mak test</span><br></pre></td></tr></table></figure></p>
<h2 id="二、生成密钥、证书">二、生成密钥、证书</h2><h3 id="1-为服务器端和客户端准备公钥、私钥">1.为服务器端和客户端准备公钥、私钥</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 生成服务器端私钥</span><br><span class="line">openssl genrsa -out server.key 1024</span><br><span class="line"># 生成服务器端公钥</span><br><span class="line">openssl rsa -in server.key -pubout -out server.pem</span><br><span class="line"># 生成客户端私钥</span><br><span class="line">openssl genrsa -out client.key 1024</span><br><span class="line"># 生成客户端公钥</span><br><span class="line">openssl rsa -in client.key -pubout -out client.pem</span><br></pre></td></tr></table></figure>
<h3 id="2-生成_CA_证书">2.生成 CA 证书</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 生成 CA 私钥</span><br><span class="line">openssl genrsa -out ca.key 1024</span><br><span class="line"># X.509 Certificate Signing Request (CSR) Management.</span><br><span class="line">openssl req -new -key ca.key -out ca.csr</span><br><span class="line"># X.509 Certificate Data Management.</span><br><span class="line">openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</span><br></pre></td></tr></table></figure>
<p>在执行第二步时会出现<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">D:\openssl-1.0.1c\keys&gt;openssl req -new -key ca.key -out ca.csr</span><br><span class="line">Loading 'screen' into random state - done</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter '.', the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:GuangDong</span><br><span class="line">Locality Name (eg, city) []:GuangZhou</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:My CA</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:localhost</span><br><span class="line">Email Address []:</span><br><span class="line">Please enter the following 'extra' attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br></pre></td></tr></table></figure></p>
<p>可以参考上面配置</p>
<h3 id="3-生成服务器端证书和客户端证书">3.生成服务器端证书和客户端证书</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端需要向 CA 机构申请签名证书，在申请签名证书之前依然是创建自己的 CSR 文件</span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"># 向自己的 CA 机构申请证书，签名过程需要 CA 的证书和私钥参与，最终颁发一个带有 CA 签名的证书</span><br><span class="line">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt</span><br><span class="line"># client 端</span><br><span class="line">openssl req -new -key client.key -out client.csr</span><br><span class="line"># client 端到 CA 签名</span><br><span class="line">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt</span><br></pre></td></tr></table></figure>
<p>最后生成的文件如下：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/50139298.png" alt=""></p>
<h2 id="三、本地测试">三、本地测试</h2><p>将server.crt跟server.key复制到nginx安装目录的conf的keys文件夹下面<br>本地nginx配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line">        # deny access to .htaccess files, if Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    # HTTPS server</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ssl                  on;</span><br><span class="line">        ssl_certificate      keys/server.crt;</span><br><span class="line">        ssl_certificate_key  keys/server.key;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers   on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            #root   html;</span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">			proxy_redirect off;</span><br><span class="line">			proxy_set_header Host $host;</span><br><span class="line">			proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">			proxy_pass http://localhost:8080/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我本地<a href="https://localhost/跳到本地resin应用（8080端口）" target="_blank" rel="external">https://localhost/跳到本地resin应用（8080端口）</a></p>
<p>配置好nginx之后nginx -s reload重新加载配置<br>打开浏览器即可访问<a href="https://localhost/" target="_blank" rel="external">https://localhost/</a><br>由于自行颁发的SSL证书不受浏览器信任，所以会出现<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/50742788.png" alt=""><br>本地点击继续前往就行了<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/50682384.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>在本地环境测试网站HTTPS是否能正确工作时同样需要用到证书，但由于本地环境一般没有公网IP，没有固定域名等原因，所以就会考虑采用非正式的证书，即会选择使用自签名证书(Self-signed SSL Certificate)</p>
<]]>
    </summary>
    
      <category term="openssl" scheme="https://dengliming.github.io/tags/openssl/"/>
    
      <category term="https" scheme="https://dengliming.github.io/categories/https/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[XSS与HttpOnly]]></title>
    <link href="https://dengliming.github.io/2015/12/27/XSS-and-HttpOnly/"/>
    <id>https://dengliming.github.io/2015/12/27/XSS-and-HttpOnly/</id>
    <published>2015-12-27T13:12:51.000Z</published>
    <updated>2015-12-27T13:20:21.000Z</updated>
    <content type="html"><![CDATA[<p>1.什么是HttpOnly?</p>
<p>如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，具体一点的介绍请google进行搜索</p>
<p>2.HttpOnly的设置样例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader("Set-Cookie", "cookiename=value;</span><br><span class="line">Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly");</span><br></pre></td></tr></table></figure>
<p>具体参数的含义再次不做阐述，设置完毕后通过js脚本是读不到该cookie的，但使用如下方式可以读取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookies[]=request.getCookies();</span><br></pre></td></tr></table></figure>
<p>下面测试一下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</span><br><span class="line">	pageEncoding="UTF-8"%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	response.setHeader("Set-Cookie",</span><br><span class="line">			"sessionId=abc;Path=/;Max-Age=20*60*1000;");</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		alert(getCookie('sessionId'));</span><br><span class="line">		//读取cookies</span><br><span class="line">		function getCookie(name) &#123;</span><br><span class="line">			var nameEQ = name + "=";</span><br><span class="line">			var ca = document.cookie.split(';');</span><br><span class="line">			for (var i = 0; i &lt; ca.length; i++) &#123;</span><br><span class="line">				var c = ca[i];</span><br><span class="line">				while (c.charAt(0) == ' ')</span><br><span class="line">					c = c.substring(1, c.length);</span><br><span class="line">				if (c.indexOf(nameEQ) == 0)</span><br><span class="line">					return c.substring(nameEQ.length, c.length);</span><br><span class="line">			&#125;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>运行结果为： abc<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122702.png" alt=""></p>
<p>下面改成HttpOnly看看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Set-Cookie"</span>,</span><br><span class="line">			<span class="string">"sessionId=abc;Path=/;Max-Age=20*60*1000;HttpOnly"</span>);</span><br></pre></td></tr></table></figure></p>
<p>运行结果为：null<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122701.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.什么是HttpOnly?</p>
<p>如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，具体一点的介绍请google进行搜索</p>
<p>2.HttpOnly的设置样例</p>
<figure]]>
    </summary>
    
      <category term="HttpOnly" scheme="https://dengliming.github.io/tags/HttpOnly/"/>
    
      <category term="XSS" scheme="https://dengliming.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ngrok将本地Web服务映射到外网]]></title>
    <link href="https://dengliming.github.io/2015/12/26/Using-ngrok-map-the-local-service-to-the-network/"/>
    <id>https://dengliming.github.io/2015/12/26/Using-ngrok-map-the-local-service-to-the-network/</id>
    <published>2015-12-26T14:35:51.000Z</published>
    <updated>2015-12-26T16:59:26.000Z</updated>
    <content type="html"><![CDATA[<p>利用ngrok可以通过外网访问本地项目，这个对我们是非常有用的，比如我们平常开发的网站还没更新到线上，但是又需要通过外网可以访问到本地应用，方便测试。</p>
<p>该工具使用方法非常简单。</p>
<p>首先需要下载客户端</p>
<p>下载地址：<a href="http://www.tunnel.mobi/" target="_blank" rel="external">http://www.tunnel.mobi/</a></p>
<p><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122601.jpg" alt=""></p>
<p>下载以上两个文件。然后放到同一个目录</p>
<p><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122602.png" alt=""></p>
<p>然后在该目录打开命令行窗口输入命令：<br>ngrok -config ngrok.cfg -subdomain dts 80<br>dts为配置的子域名 80是本地项目端口</p>
<p>本地效果：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122603.png" alt=""></p>
<p>公网效果：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/2015122604.png" alt=""></p>
<p>注：最近发现<a href="http://www.tunnel.mobi/" target="_blank" rel="external">http://www.tunnel.mobi/</a> 已经访问不了 不过有另外备用的可以使用：<a href="http://qydev.com/" target="_blank" rel="external">http://qydev.com/</a><br>这个微信demo开发有很大帮助。mark下</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>利用ngrok可以通过外网访问本地项目，这个对我们是非常有用的，比如我们平常开发的网站还没更新到线上，但是又需要通过外网可以访问到本地应用，方便测试。</p>
<p>该工具使用方法非常简单。</p>
<p>首先需要下载客户端</p>
<p>下载地址：<a href="htt]]>
    </summary>
    
      <category term="ngrok" scheme="https://dengliming.github.io/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis之sds动态字符串]]></title>
    <link href="https://dengliming.github.io/2015/07/06/The-SDS-of-redis-dynamic-string/"/>
    <id>https://dengliming.github.io/2015/07/06/The-SDS-of-redis-dynamic-string/</id>
    <published>2015-07-06T15:30:51.000Z</published>
    <updated>2015-12-26T16:59:30.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redis之sds动态字符串">redis之sds动态字符串</h1><hr>
<h2 id="redis定义">redis定义</h2><p>redis源码中sds的结构是这样的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span><br><span class="line"> * 保存字符串对象的结构</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">struct</span> sdshdr &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>buf最后一个字节保存了空字符’\0’遵循c字符串以空字符结尾的惯例，保存空字符的1字节空间是不记在len里面</p>
<h2 id="api之sdslen">api之sdslen</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 返回 sds 实际保存的字符串的长度</span><br><span class="line"> *</span><br><span class="line"> * T = O(1)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">sdslen</span><span class="params">(<span class="keyword">const</span> sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh = (<span class="keyword">void</span>*)(s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line">    <span class="keyword">return</span> sh-&gt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中要理解这段代码struct sdshdr <em>sh = (void</em>)(s-(sizeof(struct sdshdr)));</p>
<p>需要回顾下c的一些基础知识：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node &#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> str[];</span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">char</span>*) = <span class="number">4</span></span><br><span class="line"><span class="keyword">sizeof</span>(Node*) = <span class="number">4</span></span><br><span class="line"><span class="keyword">sizeof</span>(Node2) = <span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<p>前两个是指针所占的字节是由系统的寻址能力有关，以上是32位的，后面那个<br>int len占4个字节，str[]暂未分配内存</p>
<p>然后看下sds初始化方法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdsnewlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *init, size_t initlen)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">if</span> (init) &#123;</span><br><span class="line">        <span class="comment">// zmalloc 不初始化所分配的内存</span></span><br><span class="line">        sh = zmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class="line">        sh = zcalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存分配失败，返回</span></span><br><span class="line">    <span class="keyword">if</span> (sh == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置初始化长度</span></span><br><span class="line">    sh-&gt;len = initlen;</span><br><span class="line">    <span class="comment">// 新 sds 不预留任何空间</span></span><br><span class="line">    sh-&gt;<span class="built_in">free</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">if</span> (initlen &amp;&amp; init)</span><br><span class="line">        <span class="built_in">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class="line">    <span class="comment">// 以 \0 结尾</span></span><br><span class="line">    sh-&gt;buf[initlen] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>*)sh-&gt;buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里面返回sds的地址只返回了buf部分，所以前面如果我们需要获取sds的长度len需要减去(sizeof(struct sdshdr))个字节</p>
<h2 id="api之sdsfree">api之sdsfree</h2><p>释放给定的sds<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfree</span><span class="params">(sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == NULL) <span class="keyword">return</span>;</span><br><span class="line">    zfree(s-<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="api之sdsclear">api之sdsclear</h2><p>在不释放 SDS 的字符串空间的情况下，重置 SDS 所保存的字符串为空字符串。T = O(1)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsclear</span><span class="params">(sds s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出 sdshdr</span></span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新计算属性</span></span><br><span class="line">    sh-&gt;<span class="built_in">free</span> += sh-&gt;len;</span><br><span class="line">    sh-&gt;len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将结束符放到最前面（相当于惰性地删除 buf 中的内容）</span></span><br><span class="line">    sh-&gt;buf[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之所以sh-&gt;free += sh-&gt;len是因为redis的惰性空间释放，也就是当sds缩短时程序并没有立即回收缩短的字节，而是使用free属性记录起来，等待将来的使用，这样的好处就是下一次扩展sds时，就可以直接使用这些未使用的空间，不需要重新分配内存。</p>
<h2 id="api之sdscat">api之sdscat</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdscat</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdscatlen(s, t, <span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscatlen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">void</span> *t, size_t len)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> sdshdr *sh;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原有字符串长度</span></span><br><span class="line">    <span class="keyword">size_t</span> curlen = sdslen(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展 sds 空间</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    s = sdsMakeRoomFor(s,len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存不足？直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (s == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制 t 中的内容到字符串后部</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line">    <span class="built_in">memcpy</span>(s+curlen, t, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新属性</span></span><br><span class="line">    sh-&gt;len = curlen+len;</span><br><span class="line">    sh-&gt;<span class="built_in">free</span> = sh-&gt;<span class="built_in">free</span>-len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新结尾符号</span></span><br><span class="line">    s[curlen+len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回新 sds</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<blockquote>
<ul>
<li><a href="http://redisbook.com/" target="_blank" rel="external">redis设计与实现</a></li>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">注释的redis源码</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="redis之sds动态字符串">redis之sds动态字符串</h1><hr>
<h2 id="redis定义">redis定义</h2><p>redis源码中sds的结构是这样的：<br><figure class="highlight cpp"><table>]]>
    </summary>
    
      <category term="redis" scheme="https://dengliming.github.io/tags/redis/"/>
    
      <category term="sds" scheme="https://dengliming.github.io/tags/sds/"/>
    
      <category term="redis" scheme="https://dengliming.github.io/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo搭建博客]]></title>
    <link href="https://dengliming.github.io/2015/06/21/Hexo-build-blog/"/>
    <id>https://dengliming.github.io/2015/06/21/Hexo-build-blog/</id>
    <published>2015-06-21T13:19:51.000Z</published>
    <updated>2015-12-26T16:59:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="今天终于开通了我的博客，这是一个全新的开始。">今天终于开通了我的博客，这是一个全新的开始。</h1><p>下面是我搭建独立博客的过程</p>
<p>准备工作：<br>Nodejs安装<br>Git安装<br>Hexo配置</p>
<p>nodejs环境配置可参考资料<a href="http://www.cnblogs.com/bicabo/p/3630777.html" target="_blank" rel="external">nodejs环境配置</a></p>
<p>Hexo安装，要用全局安装，加-g参数</p>
<blockquote>
<p>E:> npm install -g hexo</p>
</blockquote>
<p>如果执行这个命令出现<br>npm WARN optional dep failed, continuing fsevents@0.3.6<br>则改为使用</p>
<blockquote>
<p> E:>npm install —unsafe-perm —verbose -g hexo</p>
</blockquote>
<p>安装成功之后可查看hexo版本</p>
<blockquote>
<p>E:>hexo version<br>hexo-cli: 0.1.7<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 1.0<br>node: 0.10.32<br>v8: 3.14.5.9<br>ares: 1.9.0-DEV<br>uv: 0.10.28<br>zlib: 1.2.3<br>modules: 11<br>openssl: 1.0.1i</p>
</blockquote>
<p>安装好后，我们就可以使用Hexo创建项目了</p>
<blockquote>
<p>E:\nodebook&gt;hexo init blog<br>INFO  Copying data to E:\nodebook\blog<br>INFO  You are almost done! Don’t forget to run ‘npm install’ before you start blogging with Hexo!</p>
</blockquote>
<p>我们看到当前在目录下，出现了blog文件夹，包括初始化的文件。<br>进入blog目录，启动Hexo服务器（启动之前需执行npm install）</p>
<blockquote>
<p>E:\nodebook&gt;cd blog<br> E:\nodebook&gt;npm install<br>E:\nodebook&gt;hexo server</p>
</blockquote>
<p>启动成功后可以在浏览器输入：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 即可访问</p>
<p>接下来发布到github</p>
<ul>
<li>需要在<a href="https://github.com/" target="_blank" rel="external">github</a>上注册一个账号</li>
<li>建立与你用户名对应的仓库，仓库名必须为your_user_name.github.com</li>
<li><p>添加ssh公钥</p>
<p>前两步比较简单，最终建成的仓库如下：<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506215.png" alt=""></p>
</li>
</ul>
<p>第三步：添加ssh公钥</p>
<p>输入以下指令（邮箱就是你注册Github时候的邮箱）</p>
<blockquote>
<p>ssh-kengen -t rsa -C “1196767447@qq.com”</p>
</blockquote>
<p>然后键入以下指令：</p>
<blockquote>
<p>ssh-agent -s</p>
</blockquote>
<p>继续输入指令：</p>
<blockquote>
<p>ssh-add ~/.ssh/id_rsa</p>
</blockquote>
<p>如果出现Could not open a connection to your authentication agent.<br>先输入</p>
<blockquote>
<p>$ eval <code>ssh-agent</code><br>Agent pid 11368</p>
</blockquote>
<p>然后再输入：</p>
<blockquote>
<p>$ ssh-add<br>Identity added: /c/Users/DLM/.ssh/id_rsa (/c/Users/DLM/.ssh/id_rsa)</p>
</blockquote>
<p>复制ssh公钥</p>
<blockquote>
<p>$ clip&lt; ~/.ssh/id_rsa.pub</p>
</blockquote>
<p>然后到github上面，点击Settings<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506211.png" alt=""></p>
<p>点击SSH keys<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506212.jpg" alt=""></p>
<p>点击Add SSH key<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506213.png" alt=""></p>
<p>输入Title，作为这个key的描述，然后这个Key就是刚刚拷贝的，你直接粘贴就好<br><img src="http://7xjw47.com1.z0.glb.clouddn.com/201506214.png" alt=""></p>
<p>最后测试一下是否成功了</p>
<blockquote>
<p>$ ssh -T git@github.com<br>The authenticity of host ‘github.com (192.30.252.129)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yew<br>Please type ‘yes’ or ‘no’: yes<br>Warning: Permanently added ‘github.com,192.30.252.129’ (RSA) to the list of know<br>n hosts.<br>Hi dengliming! You’ve successfully authenticated, but GitHub does not provide sh<br>ell access.</p>
</blockquote>
<p>这个说明已经成功了。</p>
<p>最后进入blog目录，生成静态页面</p>
<blockquote>
<p>hexo clean</p>
</blockquote>
<p>最后，通过命令进行部署。</p>
<blockquote>
<p>hexo deploy</p>
</blockquote>
<p>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：<br><a href="http://yourname.github.io/" target="_blank" rel="external">http://yourname.github.io/</a></p>
<p>以后发布博客的部署步骤<br>hexo clean<br>hexo generate<br>hexo deploy</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="今天终于开通了我的博客，这是一个全新的开始。">今天终于开通了我的博客，这是一个全新的开始。</h1><p>下面是我搭建独立博客的过程</p>
<p>准备工作：<br>Nodejs安装<br>Git安装<br>Hexo配置</p>
<p>nodejs环境配置可参考]]>
    </summary>
    
      <category term="hexo" scheme="https://dengliming.github.io/tags/hexo/"/>
    
      <category term="日志" scheme="https://dengliming.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>