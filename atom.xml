<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dengliming&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/db64d98f217b5e9866e79a4e3b5020b5</icon>
  
  <link href="https://dengliming.github.io/atom.xml" rel="self"/>
  
  <link href="https://dengliming.github.io/"/>
  <updated>2023-04-08T20:33:37.577Z</updated>
  <id>https://dengliming.github.io/</id>
  
  <author>
    <name>Liming Deng</name>
    <email>liming.d.pro@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>消息队列之HTTPSQS</title>
    <link href="https://dengliming.github.io/2016/07/27/mq-httpsqs/"/>
    <id>https://dengliming.github.io/2016/07/27/mq-httpsqs/</id>
    <published>2016-07-27T21:00:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="httpsqs是什么">HTTPSQS是什么?</span></h2><p>一款基于 HTTP GET&#x2F;POST 协议的轻量级开源简单消息队列服务，<br>使用 Tokyo Cabinet 的 B+Tree Key&#x2F;Value 数据库来做数据的持久化存储。如需了解更多直接参考<a href="http://zyan.cc/httpsqs/">张宴博客</a>.</p><h2><span id="安装">安装</span></h2><p>此次安装是在centos6.4系统上操作的<br>安装可以直接参考<a href="http://zyan.cc/httpsqs/">张宴博客</a> <span id="more"></span><br>下面是我安装过程出现的一些问题：</p><p><img src="/images/13449719.png"></p><p>安装gcc编译器即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc </span><br></pre></td></tr></table></figure><p>若出现configure: error: zlib.h is required</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br></pre></td></tr></table></figure><p>最后启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpsqs -d -p 1218 -x /data0/queue</span><br></pre></td></tr></table></figure><p>请使用命令“killall httpsqs”、“pkill httpsqs”和“kill cat&#x2F;tmp&#x2F;httpsqs.pid”来停止httpsqs。</p><p>测试下入队列<br><a href="http://127.0.0.1:1218/?name=my_queue&opt=put&data=%E7%BB%8F%E8%BF%87URL%E7%BC%96%E7%A0%81%E7%9A%84%E6%96%87%E6%9C%AC%E6%B6%88%E6%81%AF&auth=mypass123">http://127.0.0.1:1218/?name=my_queue&amp;opt=put&amp;data=经过URL编码的文本消息&amp;auth=mypass123</a><br><img src="/images/15645496.png"></p><p>接下来使用java客户端操作下（需下载httpsqs4j.jar）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> httpsqs;</span><br><span class="line"><span class="keyword">import</span> com.daguu.lib.httpsqs4j.Httpsqs4j;</span><br><span class="line"><span class="keyword">import</span> com.daguu.lib.httpsqs4j.HttpsqsClient;</span><br><span class="line"><span class="keyword">import</span> com.daguu.lib.httpsqs4j.HttpsqsStatus;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Httpsqs4j.setConnectionInfo(<span class="string">&quot;192.168.1.11&quot;</span>, <span class="number">1218</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">HttpsqsClient</span> <span class="variable">client</span> <span class="operator">=</span> Httpsqs4j.createNewClient();</span><br><span class="line"><span class="type">HttpsqsStatus</span> <span class="variable">status</span> <span class="operator">=</span> client.getStatus(<span class="string">&quot;my_queue&quot;</span>);</span><br><span class="line">System.out.println(status.version);</span><br><span class="line">System.out.println(status.queueName);</span><br><span class="line">System.out.println(status.maxNumber);</span><br><span class="line">System.out.println(status.getLap);</span><br><span class="line">System.out.println(status.getPosition);</span><br><span class="line">System.out.println(status.putLap);</span><br><span class="line">System.out.println(status.putPosition);</span><br><span class="line">System.out.println(status.unreadNumber);</span><br><span class="line"><span class="comment">//client.putString(&quot;test&quot;, &quot;test&quot;);</span></span><br><span class="line">System.out.println(client.getString(<span class="string">&quot;my_queue&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.7</span></span><br><span class="line">my_queue</span><br><span class="line"><span class="number">1000000</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">test</span><br></pre></td></tr></table></figure><h2><span id="总结">总结</span></h2><p>VMware使用桥接方式<br>&#x2F;etc&#x2F;init.d&#x2F;iptables stop关闭防火墙</p><h2><span id="参考">参考</span></h2><p>参考：</p><blockquote><ul><li>[张宴博客][1]<br>[1]: <a href="http://zyan.cc/httpsqs/">http://zyan.cc/httpsqs/</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;HTTPSQS是什么&quot;&gt;&lt;a href=&quot;#HTTPSQS是什么&quot; class=&quot;headerlink&quot; title=&quot;HTTPSQS是什么?&quot;&gt;&lt;/a&gt;HTTPSQS是什么?&lt;/h2&gt;&lt;p&gt;一款基于 HTTP GET&amp;#x2F;POST 协议的轻量级开源简单消息队列服务，&lt;br&gt;使用 Tokyo Cabinet 的 B+Tree Key&amp;#x2F;Value 数据库来做数据的持久化存储。如需了解更多直接参考&lt;a href=&quot;http://zyan.cc/httpsqs/&quot;&gt;张宴博客&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;此次安装是在centos6.4系统上操作的&lt;br&gt;安装可以直接参考&lt;a href=&quot;http://zyan.cc/httpsqs/&quot;&gt;张宴博客&lt;/a&gt;</summary>
    
    
    
    
    <category term="HTTPSQS" scheme="https://dengliming.github.io/tags/HTTPSQS/"/>
    
  </entry>
  
  <entry>
    <title>nginx之正向代理</title>
    <link href="https://dengliming.github.io/2016/05/08/nginx-forward_proxy/"/>
    <id>https://dengliming.github.io/2016/05/08/nginx-forward_proxy/</id>
    <published>2016-05-08T15:00:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>nginx不仅可以来做反向代理，也可以用来做正向代理(透明代理,代理上网)，首先先来了解下什么是正向代理和反向代理以及两者之间的区别。<span id="more"></span></p><h2><span id="正文">正文</span></h2><h3><span id="正向代理">正向代理</span></h3><p>正向代理是一个位于客户端和原始服务器之间的服务器， 从而为客户端从原始服务器中取得所需要的数据。客户端向代理服务器发送一个请求，并且写明了地址。之后代理向原始服务器转交并且将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理服务器<br> 这里引用一个篇博文的例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A用户无法访问twitter，但是我能访问B服务器，而B服务器可以访问twitter。于是我访问B服务器，告诉它”嗨，伙计，我要访问twitter“，B服务器收到请求后，去访问twitter，twitter把响应信息返回给B服务器，B服务器再把响应信息返回给A。这样，通过B代理服务器，就实现了翻墙。</span><br></pre></td></tr></table></figure><h3><span id="反向代理">反向代理</span></h3><p>反向代理正好相反。对于客户端来说，反向代理就好像原始服务器。并且客户端不需要进行任何设置。客户端向reverse proxy中的name-space发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端。这些内容就好似他自己一样。</p><h3><span id="两者区别">两者区别</span></h3><ol><li>从用途上来区分：<br>正向代理：正向代理用途是为了在防火墙内的局域网提供访问internet的途径。另外还可以使用缓冲特性减少网络使用率<br>反向代理：反向代理的用途是将防火墙后面的服务器提供给internet用户访问。同时还可以完成诸如负载均衡等功能</li><li>从安全性来讲：<br>正向代理：正向代理允许客户端通过它访问任意网站并且隐蔽客户端自身，因此你必须采取安全措施来确保仅为经过授权的客户端提供服务<br>反向代理：对外是透明的，访问者并不知道自己访问的是代理。对访问者而言，他以为访问的就是原始服务器</li></ol><h3><span id="配置相关示例">配置相关示例</span></h3><p>下面主要说下nginx正向代理配置<br>window下测试的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                  &#x27;$http_host $request_uri &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    server&#123;</span><br><span class="line">        resolver 8.8.8.8;</span><br><span class="line">        resolver_timeout 30s;</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://$http_host$request_uri;</span><br><span class="line">                proxy_set_header Host $http_host;</span><br><span class="line">                proxy_buffers 256 4k;</span><br><span class="line">                proxy_max_temp_file_size 0;</span><br><span class="line">                proxy_connect_timeout 30;</span><br><span class="line">                proxy_cache_valid 200 302 10m;</span><br><span class="line">                proxy_cache_valid 301 1h;</span><br><span class="line">                proxy_cache_valid any 1m;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际就是获取$http_host$request_uri变量值重新拼接用户访问的url,当然以上配置尚未支持https。<br>启动nginx之后。下面给出java访问示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 定义HttpClient</span></span><br><span class="line"><span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultHttpClient</span>();</span><br><span class="line"><span class="comment">// 实例化HTTP方法</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://www.ruanyifeng.com/blog/2010/02/url_encoding.html&quot;</span>);</span><br><span class="line"><span class="comment">// 依次是代理地址，代理端口号，协议类型</span></span><br><span class="line"><span class="type">HttpHost</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">80</span>);</span><br><span class="line">client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);</span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(request);</span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(response.getEntity().getContent()));</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">NL</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">sb.append(line + NL);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">content = sb.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in.close();<span class="comment">// 最后要关闭BufferedReader</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return content;</span></span><br><span class="line">System.err.println(content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码是通过本地80端口配置的代理访问<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">http://www.ruanyifeng.com/blog/2010/02/url_encoding.html</a>  ps：代码依赖HttpClient<br>的jar包<br>这里就不贴程序打印的结果了。查看下nginx的access.log就知道是否成功访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 - - [07/May/2016:21:56:27 +0800] &quot;GET /blog/2010/02/url_encoding.html HTTP/1.1&quot; 200 99394 &quot;-&quot; www.ruanyifeng.com /blog/2010/02/url_encoding.html &quot;Apache-HttpClient/4.3.6 (java 1.5)&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>也可以通过以下代码访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 定义HttpClient</span></span><br><span class="line"><span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultHttpClient</span>();</span><br><span class="line"><span class="comment">// 实例化HTTP方法</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://127.0.0.1/blog/2010/02/url_encoding.html&quot;</span>);</span><br><span class="line">request.setHeader(<span class="string">&quot;Host&quot;</span>, <span class="string">&quot;www.ruanyifeng.com&quot;</span>);</span><br><span class="line"><span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(request);</span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(response.getEntity().getContent()));</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">NL</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">sb.append(line + NL);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">content = sb.toString();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in.close();<span class="comment">// 最后要关闭BufferedReader</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return content;</span></span><br><span class="line">System.err.println(content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果是一样的。</p><p>参考：</p><blockquote><ul><li><a href="http://github.thinkingbar.com/reverseProxy/">正向代理、反向代理、透明代理</a></li><li><a href="http://my.oschina.net/duxuefeng/blog/275179">nginx正向代理配置</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;nginx不仅可以来做反向代理，也可以用来做正向代理(透明代理,代理上网)，首先先来了解下什么是正向代理和反向代理以及两者之间的区别。</summary>
    
    
    
    
    <category term="nginx" scheme="https://dengliming.github.io/tags/nginx/"/>
    
    <category term="proxy" scheme="https://dengliming.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>DWR快速入门（一）</title>
    <link href="https://dengliming.github.io/2016/02/26/dwr-quick-start-1/"/>
    <id>https://dengliming.github.io/2016/02/26/dwr-quick-start-1/</id>
    <published>2016-02-26T23:00:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>DWR(Direct Web Remoting)是一个WEB远程调用框架.利用这个框架可以让AJAX开发变得很简单.利用DWR可以在客户端利用JavaScript直接调用服务端的Java方法并返回值给JavaScript就好像直接本地客户端调用一样</p><span id="more"></span><h2><span id="快速开始">快速开始</span></h2><h3><span id="1下载dwr-jar-文件">1.下载DWR JAR 文件</span></h3><p>这里直接使用maven下载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.directwebremoting<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dwr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="2下载commons-logging-jar">2.下载Commons Logging JAR</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="3webxml配置dwr-servlet">3.web.xml配置DWR servlet</span></h3><p>在项目WEB-INF&#x2F;web.xml里面添加以下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;display-name&gt;DWR Servlet&lt;/display-name&gt;</span><br><span class="line">  &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;org.directwebremoting.servlet.DwrServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">     &lt;param-name&gt;debug&lt;/param-name&gt;</span><br><span class="line">     &lt;param-value&gt;<span class="literal">true</span>&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/dwr<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/servlet-mapping&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="4编写自定义java-bean">4.编写自定义java bean</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + name ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="5创建dwr配置文件">5.创建dwr配置文件</span></h3><p>在WEB-INF下创建dwr.xml,配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">dwr</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://getahead.org/dwr/dwr30.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dwr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">allow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">create</span> <span class="attr">creator</span>=<span class="string">&quot;new&quot;</span> <span class="attr">javascript</span>=<span class="string">&quot;JDate&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;class&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">create</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">create</span> <span class="attr">creator</span>=<span class="string">&quot;new&quot;</span> <span class="attr">javascript</span>=<span class="string">&quot;Demo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;class&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.test.bean.Demo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">create</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">allow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dwr</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="6启动应用">6.启动应用</span></h3><p>启动应用并在浏览器访问<a href="http://localhost/dwr/">http://localhost/dwr/</a><br><img src="/images/15056296.png"></p><p>具体怎么在我们的应用中利用他们来编写javascript呢?<br>点击Demo进入以下页面：<br><img src="/images/15094875.png"></p><p>这个页面介绍了我们自定义的Javabean以及怎么通过javascript来调用，从内容中可以知道只需要在自己编写的html或者jsp页面中引入<br> <script type="text/javascript" src="/dwr/engine.js"></script><br>  <script type="text/javascript" src="/dwr/interface/Demo.js"></script><br>就可以调用Demo类中的方法了</p><h3><span id="7编写测试html-testdwrhtml">7.编写测试html TestDWR.html</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;dwr/engine.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;dwr/interface/Demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Demo</span>.<span class="title function_">sayHello</span>(<span class="string">&#x27;dwr&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">callback</span>: <span class="keyword">function</span>(<span class="params">str</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(str);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此可以看到页面js成功调用Demo类的sayHello方法返回字符串并弹窗显示，是不是有点意思。今天先搞个小demo，有时间接着深入理解原理，呵呵。</p><p>参考：</p><blockquote><ul><li><a href="http://directwebremoting.org/dwr/introduction/getting-started.html">DWR官网入门教程</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;DWR(Direct Web Remoting)是一个WEB远程调用框架.利用这个框架可以让AJAX开发变得很简单.利用DWR可以在客户端利用JavaScript直接调用服务端的Java方法并返回值给JavaScript就好像直接本地客户端调用一样&lt;/p&gt;</summary>
    
    
    
    <category term="dwr" scheme="https://dengliming.github.io/categories/dwr/"/>
    
    
    <category term="dwr" scheme="https://dengliming.github.io/tags/dwr/"/>
    
  </entry>
  
  <entry>
    <title>ajax http post to https</title>
    <link href="https://dengliming.github.io/2016/01/16/ajax-http-post-to-https/"/>
    <id>https://dengliming.github.io/2016/01/16/ajax-http-post-to-https/</id>
    <published>2016-01-16T22:19:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<p>在本地同一个域http页面请求https页面，其实已经跨域了，我们知道出于安全问题的考虑，浏览器是不允许跨域访问的，那么如果使用ajax来实现跨域访问呢，开发中常用的解决方法很多，比较常用的是JSONP方法、window.name，JSONP方法是一种非官方方法，而且这种方法只支持GET方式，不如POST方式安全。即使使用jquery的jsonp方法，type设为POST，也会自动变为GET</p><p>经查资料：<br>如果跨域使用POST方式，可以使用创建一个隐藏的iframe来实现，但这样会比较麻烦<br>但是通过服务端设置Access-Control-Allow-Origin来实现跨越访问比较简单<span id="more"></span></p><p>在这里只对Access-Control-Allow-Origin做个小测试<br>先新建两个jsp页面，一个是test.jsp用来发送请求，accept.jsp用来接收请求<br>test.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/jquery.min.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=<span class="string">&quot;form&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;t&quot;</span> value=<span class="string">&quot;123&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;submit&quot;</span> onclick=<span class="string">&quot;ajaxSubmit(this)&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function <span class="title function_">ajaxSubmit</span><span class="params">(frm)</span> &#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&quot;/accept.jsp&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    data: $(<span class="string">&quot;#form&quot;</span>).serialize(),</span><br><span class="line">    success: function(result) &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>accept.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(<span class="string">&quot;success--------&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这里accept页面简单的输出success</p><p>在浏览器上看看页面效果：<br><img src="/images/78892217.png"><br>点击submit之后 查看浏览器控制台 正常返回success<br><img src="/images/78924244.png"></p><p>那么假设把test.jsp中form的提交的url改成https之后呢。PS：具体本地怎么测试https请参考另一篇<a href="https://dengliming.github.io/2016/01/16/openssl-generate-certificate/">本地openssl生成证书</a></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">ajaxSubmit</span><span class="params">(frm)</span> &#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&quot;https://localhost/accept.jsp&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    data: $(<span class="string">&quot;#form&quot;</span>).serialize(),</span><br><span class="line">    success: function(result) &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看看浏览器效果：出现No ‘Access-Control-Allow-Origin’ header is present on the requested resource<br><img src="/images/79044598.png"></p><p>然后在accept.jp加入headerAccess-Control-Allow-Origin</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;success--------&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li>表示允许任何域名跨域访问 一般线上不这么用，会指定某个域名<br>最后来看下效果：请求成功返回<br><img src="/images/79534410.png"></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在本地同一个域http页面请求https页面，其实已经跨域了，我们知道出于安全问题的考虑，浏览器是不允许跨域访问的，那么如果使用ajax来实现跨域访问呢，开发中常用的解决方法很多，比较常用的是JSONP方法、window.name，JSONP方法是一种非官方方法，而且这种方法只支持GET方式，不如POST方式安全。即使使用jquery的jsonp方法，type设为POST，也会自动变为GET&lt;/p&gt;
&lt;p&gt;经查资料：&lt;br&gt;如果跨域使用POST方式，可以使用创建一个隐藏的iframe来实现，但这样会比较麻烦&lt;br&gt;但是通过服务端设置Access-Control-Allow-Origin来实现跨越访问比较简单</summary>
    
    
    
    <category term="ajax" scheme="https://dengliming.github.io/categories/ajax/"/>
    
    
    <category term="ajax" scheme="https://dengliming.github.io/tags/ajax/"/>
    
    <category term="http" scheme="https://dengliming.github.io/tags/http/"/>
    
    <category term="https" scheme="https://dengliming.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>本地openssl生成证书</title>
    <link href="https://dengliming.github.io/2016/01/16/openssl-generate-certificate/"/>
    <id>https://dengliming.github.io/2016/01/16/openssl-generate-certificate/</id>
    <published>2016-01-16T14:19:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>在本地环境测试网站HTTPS是否能正确工作时同样需要用到证书，但由于本地环境一般没有公网IP，没有固定域名等原因，所以就会考虑采用非正式的证书，即会选择使用自签名证书(Self-signed SSL Certificate)<span id="more"></span></p><h2><span id="一-环境准备">一、环境准备：</span></h2><blockquote><ul><li><a href="http://www.activestate.com/ActivePerl">ActivePerl下载</a></li><li><a href="http://www.openssl.org/source/">openssl下载</a></li><li><a href="http://download.microsoft.com/download/e/7/7/e777851c-c1a4-4979-86b3-6886953b32e9/VS2008ProEdition90DayTrialCHSX1435983.iso">microsoft visual studio 2008下载</a></li></ul></blockquote><h3><span id="1activeperl-安装">1.ActivePerl 安装</span></h3><p>下载msi文件之后直接安装，这里我安装到了D盘<br>然后cd进入D:\Perl64\eg目录执行example.pl，如果出现Hello from ActivePerl!则说明已经安装成功</p><h3><span id="2vs2008安装">2.VS2008安装</span></h3><p><a href="http://wenku.baidu.com/link?url=DYxk_ZCRrtHFBcBVmCLdstYBbseH0hkE_bvnBIdphIP0LE8Not725dV4xiJw2-WxD_O-zx7D2ipNZ0Nji9O8lkw40SGKaDXL4PPT-BMKwHG">可以参考</a></p><h3><span id="3openssl安装">3.openssl安装</span></h3><p>下载之后解压到D:\openssl-1.0.1c<br>然后cd 到D:\openssl-1.0.1c目录</p><p>执行以下命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">perl Configure VC-WIN32 -DOPENSSL_USE_IPV6=0 --prefix=D:\openssl-1.0.1c</span><br><span class="line">ms\do_ms</span><br><span class="line">nmake -f ms/ntdll.mak</span><br><span class="line">nmake -f ms/ntdll.mak test</span><br><span class="line">nmake -f ms/ntdll.mak test</span><br></pre></td></tr></table></figure><h2><span id="二-生成密钥-证书">二、生成密钥、证书</span></h2><h3><span id="1为服务器端和客户端准备公钥-私钥">1.为服务器端和客户端准备公钥、私钥</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 生成服务器端私钥</span><br><span class="line">openssl genrsa -out server.key 1024</span><br><span class="line"># 生成服务器端公钥</span><br><span class="line">openssl rsa -in server.key -pubout -out server.pem</span><br><span class="line"># 生成客户端私钥</span><br><span class="line">openssl genrsa -out client.key 1024</span><br><span class="line"># 生成客户端公钥</span><br><span class="line">openssl rsa -in client.key -pubout -out client.pem</span><br></pre></td></tr></table></figure><h3><span id="2生成-ca-证书">2.生成 CA 证书</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 生成 CA 私钥</span><br><span class="line">openssl genrsa -out ca.key 1024</span><br><span class="line"># X.509 Certificate Signing Request (CSR) Management.</span><br><span class="line">openssl req -new -key ca.key -out ca.csr</span><br><span class="line"># X.509 Certificate Data Management.</span><br><span class="line">openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</span><br></pre></td></tr></table></figure><p>在执行第二步时会出现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">D:\openssl-1.0.1c\keys&gt;openssl req -new -key ca.key -out ca.csr</span><br><span class="line">Loading &#x27;screen&#x27; into random state - done</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:GuangDong</span><br><span class="line">Locality Name (eg, city) []:GuangZhou</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:My CA</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:localhost</span><br><span class="line">Email Address []:</span><br><span class="line">Please enter the following &#x27;extra&#x27; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br></pre></td></tr></table></figure><p>可以参考上面配置</p><h3><span id="3生成服务器端证书和客户端证书">3.生成服务器端证书和客户端证书</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 服务器端需要向 CA 机构申请签名证书，在申请签名证书之前依然是创建自己的 CSR 文件</span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"># 向自己的 CA 机构申请证书，签名过程需要 CA 的证书和私钥参与，最终颁发一个带有 CA 签名的证书</span><br><span class="line">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt</span><br><span class="line"># client 端</span><br><span class="line">openssl req -new -key client.key -out client.csr</span><br><span class="line"># client 端到 CA 签名</span><br><span class="line">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt</span><br></pre></td></tr></table></figure><p>最后生成的文件如下：<br><img src="/images/50139298.png"></p><h2><span id="三-本地测试">三、本地测试</span></h2><p>将server.crt跟server.key复制到nginx安装目录的conf的keys文件夹下面<br>本地nginx配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    # HTTPS server</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ssl                  on;</span><br><span class="line">        ssl_certificate      keys/server.crt;</span><br><span class="line">        ssl_certificate_key  keys/server.key;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers   on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            #root   html;</span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_pass http://localhost:8080/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我本地<a href="https://localhost/%E8%B7%B3%E5%88%B0%E6%9C%AC%E5%9C%B0resin%E5%BA%94%E7%94%A8%EF%BC%888080%E7%AB%AF%E5%8F%A3%EF%BC%89">https://localhost/跳到本地resin应用（8080端口）</a></p><p>配置好nginx之后nginx -s reload重新加载配置<br>打开浏览器即可访问<a href="https://localhost/">https://localhost/</a><br>由于自行颁发的SSL证书不受浏览器信任，所以会出现<br><img src="/images/50742788.png"><br>本地点击继续前往就行了<br><img src="/images/50682384.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在本地环境测试网站HTTPS是否能正确工作时同样需要用到证书，但由于本地环境一般没有公网IP，没有固定域名等原因，所以就会考虑采用非正式的证书，即会选择使用自签名证书(Self-signed SSL Certificate)</summary>
    
    
    
    <category term="https" scheme="https://dengliming.github.io/categories/https/"/>
    
    
    <category term="openssl" scheme="https://dengliming.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>XSS与HttpOnly</title>
    <link href="https://dengliming.github.io/2015/12/27/XSS-and-HttpOnly/"/>
    <id>https://dengliming.github.io/2015/12/27/XSS-and-HttpOnly/</id>
    <published>2015-12-27T21:12:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么是HttpOnly?</p><p>如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，具体一点的介绍请google进行搜索<span id="more"></span></p><p>2.HttpOnly的设置样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;cookiename=value;</span></span><br><span class="line"><span class="string">Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly&quot;</span>);</span><br></pre></td></tr></table></figure><p>具体参数的含义再次不做阐述，设置完毕后通过js脚本是读不到该cookie的，但使用如下方式可以读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookies[]=request.getCookies();</span><br></pre></td></tr></table></figure><p>下面测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;%</span><br><span class="line">response.setHeader(<span class="string">&quot;Set-Cookie&quot;</span>,</span><br><span class="line"><span class="string">&quot;sessionId=abc;Path=/;Max-Age=20*60*1000;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">alert(getCookie(<span class="string">&#x27;sessionId&#x27;</span>));</span><br><span class="line"><span class="comment">//读取cookies</span></span><br><span class="line">function <span class="title function_">getCookie</span><span class="params">(name)</span> &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">nameEQ</span> <span class="operator">=</span> name + <span class="string">&quot;=&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">ca</span> <span class="operator">=</span> document.cookie.split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ca.length; i++) &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">c</span> <span class="operator">=</span> ca[i];</span><br><span class="line"><span class="keyword">while</span> (c.charAt(<span class="number">0</span>) == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">c = c.substring(<span class="number">1</span>, c.length);</span><br><span class="line"><span class="keyword">if</span> (c.indexOf(nameEQ) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> c.substring(nameEQ.length, c.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行结果为： abc<br><img src="/images/2015122702.png"></p><p>下面改成HttpOnly看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Set-Cookie&quot;</span>,</span><br><span class="line"><span class="string">&quot;sessionId=abc;Path=/;Max-Age=20*60*1000;HttpOnly&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行结果为：null<br><img src="/images/2015122701.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.什么是HttpOnly?&lt;/p&gt;
&lt;p&gt;如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，具体一点的介绍请google进行搜索</summary>
    
    
    
    <category term="notes" scheme="https://dengliming.github.io/categories/notes/"/>
    
    
    <category term="HttpOnly" scheme="https://dengliming.github.io/tags/HttpOnly/"/>
    
    <category term="XSS" scheme="https://dengliming.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>使用ngrok将本地Web服务映射到外网</title>
    <link href="https://dengliming.github.io/2015/12/26/Using-ngrok-map-the-local-service-to-the-network/"/>
    <id>https://dengliming.github.io/2015/12/26/Using-ngrok-map-the-local-service-to-the-network/</id>
    <published>2015-12-26T22:35:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<p>利用ngrok可以通过外网访问本地项目，这个对我们是非常有用的，比如我们平常开发的网站还没更新到线上，但是又需要通过外网可以访问到本地应用，方便测试。<span id="more"></span></p><p>该工具使用方法非常简单。</p><p>首先需要下载客户端</p><p>下载地址：<a href="http://www.tunnel.mobi/">http://www.tunnel.mobi/</a></p><p><img src="/images/2015122601.jpg"></p><p>下载以上两个文件。然后放到同一个目录</p><p><img src="/images/2015122602.png"></p><p>然后在该目录打开命令行窗口输入命令：<br>ngrok -config ngrok.cfg -subdomain dts 80<br>dts为配置的子域名 80是本地项目端口</p><p>本地效果：<br><img src="/images/2015122603.png"></p><p>公网效果：<br><img src="/images/2015122604.png"></p><p>注：最近发现<a href="http://www.tunnel.mobi/">http://www.tunnel.mobi/</a> 已经访问不了 不过有另外备用的可以使用：<a href="http://qydev.com/">http://qydev.com/</a><br>这个微信demo开发有很大帮助。mark下</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用ngrok可以通过外网访问本地项目，这个对我们是非常有用的，比如我们平常开发的网站还没更新到线上，但是又需要通过外网可以访问到本地应用，方便测试。</summary>
    
    
    
    <category term="notes" scheme="https://dengliming.github.io/categories/notes/"/>
    
    
    <category term="ngrok" scheme="https://dengliming.github.io/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title>redis之sds动态字符串</title>
    <link href="https://dengliming.github.io/2015/07/06/The-SDS-of-redis-dynamic-string/"/>
    <id>https://dengliming.github.io/2015/07/06/The-SDS-of-redis-dynamic-string/</id>
    <published>2015-07-06T23:30:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="redis之sds动态字符串">redis之sds动态字符串</span></h1><hr><h2><span id="redis定义">redis定义</span></h2><p>redis源码中sds的结构是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存字符串对象的结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sdshdr</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="type">int</span> free;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>buf最后一个字节保存了空字符’\0’遵循c字符串以空字符结尾的惯例，保存空字符的1字节空间是不记在len里面<span id="more"></span></p><h2><span id="api之sdslen">api之sdslen</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * T = O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title">sdslen</span><span class="params">(<span class="type">const</span> sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sdshdr</span> *sh = (<span class="type">void</span>*)(s-(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line">    <span class="keyword">return</span> sh-&gt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中要理解这段代码struct sdshdr <em>sh &#x3D; (void</em>)(s-(sizeof(struct sdshdr)));</p><p>需要回顾下c的一些基础知识：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">char</span> str[];</span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="built_in">sizeof</span>(<span class="type">char</span>*) = <span class="number">4</span></span><br><span class="line"><span class="built_in">sizeof</span>(Node*) = <span class="number">4</span></span><br><span class="line"><span class="built_in">sizeof</span>(Node2) = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>前两个是指针所占的字节是由系统的寻址能力有关，以上是32位的，后面那个<br>int len占4个字节，str[]暂未分配内存</p><p>然后看下sds初始化方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdsnewlen</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *init, <span class="type">size_t</span> initlen)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sdshdr</span> *sh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">if</span> (init) &#123;</span><br><span class="line">        <span class="comment">// zmalloc 不初始化所分配的内存</span></span><br><span class="line">        sh = <span class="built_in">zmalloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class="line">        sh = <span class="built_in">zcalloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> sdshdr)+initlen+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存分配失败，返回</span></span><br><span class="line">    <span class="keyword">if</span> (sh == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置初始化长度</span></span><br><span class="line">    sh-&gt;len = initlen;</span><br><span class="line">    <span class="comment">// 新 sds 不预留任何空间</span></span><br><span class="line">    sh-&gt;free = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    <span class="keyword">if</span> (initlen &amp;&amp; init)</span><br><span class="line">        <span class="built_in">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class="line">    <span class="comment">// 以 \0 结尾</span></span><br><span class="line">    sh-&gt;buf[initlen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span>*)sh-&gt;buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面返回sds的地址只返回了buf部分，所以前面如果我们需要获取sds的长度len需要减去(sizeof(struct sdshdr))个字节</p><h2><span id="api之sdsfree">api之sdsfree</span></h2><p>释放给定的sds</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sdsfree</span><span class="params">(sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">zfree</span>(s-<span class="built_in">sizeof</span>(<span class="keyword">struct</span> sdshdr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="api之sdsclear">api之sdsclear</span></h2><p>在不释放 SDS 的字符串空间的情况下，重置 SDS 所保存的字符串为空字符串。T &#x3D; O(1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sdsclear</span><span class="params">(sds s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出 sdshdr</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sdshdr</span> *sh = (<span class="type">void</span>*) (s-(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新计算属性</span></span><br><span class="line">    sh-&gt;free += sh-&gt;len;</span><br><span class="line">    sh-&gt;len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将结束符放到最前面（相当于惰性地删除 buf 中的内容）</span></span><br><span class="line">    sh-&gt;buf[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以sh-&gt;free +&#x3D; sh-&gt;len是因为redis的惰性空间释放，也就是当sds缩短时程序并没有立即回收缩短的字节，而是使用free属性记录起来，等待将来的使用，这样的好处就是下一次扩展sds时，就可以直接使用这些未使用的空间，不需要重新分配内存。</p><h2><span id="api之sdscat">api之sdscat</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdscat</span><span class="params">(sds s, <span class="type">const</span> <span class="type">char</span> *t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sdscatlen</span>(s, t, <span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscatlen</span><span class="params">(sds s, <span class="type">const</span> <span class="type">void</span> *t, <span class="type">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sdshdr</span> *sh;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原有字符串长度</span></span><br><span class="line">    <span class="type">size_t</span> curlen = <span class="built_in">sdslen</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展 sds 空间</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    s = <span class="built_in">sdsMakeRoomFor</span>(s,len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存不足？直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制 t 中的内容到字符串后部</span></span><br><span class="line">    <span class="comment">// T = O(N)</span></span><br><span class="line">    sh = (<span class="type">void</span>*) (s-(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> sdshdr)));</span><br><span class="line">    <span class="built_in">memcpy</span>(s+curlen, t, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新属性</span></span><br><span class="line">    sh-&gt;len = curlen+len;</span><br><span class="line">    sh-&gt;free = sh-&gt;free-len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新结尾符号</span></span><br><span class="line">    s[curlen+len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回新 sds</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><blockquote><ul><li><a href="http://redisbook.com/">redis设计与实现</a></li><li><a href="https://github.com/huangz1990/redis-3.0-annotated">注释的redis源码</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;redis之sds动态字符串&quot;&gt;&lt;a href=&quot;#redis之sds动态字符串&quot; class=&quot;headerlink&quot; title=&quot;redis之sds动态字符串&quot;&gt;&lt;/a&gt;redis之sds动态字符串&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;redis定义&quot;&gt;&lt;a href=&quot;#redis定义&quot; class=&quot;headerlink&quot; title=&quot;redis定义&quot;&gt;&lt;/a&gt;redis定义&lt;/h2&gt;&lt;p&gt;redis源码中sds的结构是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 保存字符串对象的结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;sdshdr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// buf 中已占用空间的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// buf 中剩余可用空间的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; free;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 数据空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buf[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;buf最后一个字节保存了空字符’\0’遵循c字符串以空字符结尾的惯例，保存空字符的1字节空间是不记在len里面</summary>
    
    
    
    <category term="redis" scheme="https://dengliming.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://dengliming.github.io/tags/redis/"/>
    
    <category term="sds" scheme="https://dengliming.github.io/tags/sds/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客</title>
    <link href="https://dengliming.github.io/2015/06/21/Hexo-build-blog/"/>
    <id>https://dengliming.github.io/2015/06/21/Hexo-build-blog/</id>
    <published>2015-06-21T21:19:51.000Z</published>
    <updated>2023-04-08T20:33:37.577Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="今天终于开通了我的博客这是一个全新的开始">今天终于开通了我的博客，这是一个全新的开始。</span></h1><p>下面是我搭建独立博客的过程<span id="more"></span></p><p>准备工作：<br>Nodejs安装<br>Git安装<br>Hexo配置</p><p>nodejs环境配置可参考资料<a href="http://www.cnblogs.com/bicabo/p/3630777.html">nodejs环境配置</a></p><p>Hexo安装，要用全局安装，加-g参数</p><blockquote><p>E:&gt; npm install -g hexo</p></blockquote><p>如果执行这个命令出现<br>npm WARN optional dep failed, continuing <a href="mailto:&#x66;&#x73;&#x65;&#x76;&#x65;&#x6e;&#x74;&#x73;&#64;&#x30;&#x2e;&#51;&#x2e;&#x36;">&#x66;&#x73;&#x65;&#x76;&#x65;&#x6e;&#x74;&#x73;&#64;&#x30;&#x2e;&#51;&#x2e;&#x36;</a><br>则改为使用</p><blockquote><p> E:&gt;npm install –unsafe-perm –verbose -g hexo</p></blockquote><p>安装成功之后可查看hexo版本</p><blockquote><p>E:&gt;hexo version<br>hexo-cli: 0.1.7<br>os: Windows_NT 6.1.7601 win32 x64<br>http_parser: 1.0<br>node: 0.10.32<br>v8: 3.14.5.9<br>ares: 1.9.0-DEV<br>uv: 0.10.28<br>zlib: 1.2.3<br>modules: 11<br>openssl: 1.0.1i</p></blockquote><p>安装好后，我们就可以使用Hexo创建项目了</p><blockquote><p>E:\nodebook&gt;hexo init blog<br>INFO  Copying data to E:\nodebook\blog<br>INFO  You are almost done! Don’t forget to run ‘npm install’ before you start blogging with Hexo!</p></blockquote><p>我们看到当前在目录下，出现了blog文件夹，包括初始化的文件。<br>进入blog目录，启动Hexo服务器（启动之前需执行npm install）</p><blockquote><p>E:\nodebook&gt;cd blog<br> E:\nodebook&gt;npm install<br>E:\nodebook&gt;hexo server</p></blockquote><p>启动成功后可以在浏览器输入：<a href="http://localhost:4000/">http://localhost:4000/</a> 即可访问</p><p>接下来发布到github</p><ul><li>需要在<a href="https://github.com/">github</a>上注册一个账号</li><li>建立与你用户名对应的仓库，仓库名必须为your_user_name.github.com</li><li>添加ssh公钥</li></ul><p> 前两步比较简单，最终建成的仓库如下：<br> <img src="/images/201506215.png"></p><p>第三步：添加ssh公钥</p><p>输入以下指令（邮箱就是你注册Github时候的邮箱）</p><blockquote><p>ssh-kengen -t rsa -C “<a href="mailto:&#x31;&#x31;&#57;&#54;&#x37;&#54;&#55;&#52;&#x34;&#x37;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x31;&#x31;&#57;&#54;&#x37;&#54;&#55;&#52;&#x34;&#x37;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a>“</p></blockquote><p>然后键入以下指令：</p><blockquote><p>ssh-agent -s</p></blockquote><p>继续输入指令：</p><blockquote><p>ssh-add ~&#x2F;.ssh&#x2F;id_rsa</p></blockquote><p>如果出现Could not open a connection to your authentication agent.<br>先输入</p><blockquote><p>$ eval <code>ssh-agent</code><br>Agent pid 11368</p></blockquote><p>然后再输入：</p><blockquote><p>$ ssh-add<br>Identity added: &#x2F;c&#x2F;Users&#x2F;DLM&#x2F;.ssh&#x2F;id_rsa (&#x2F;c&#x2F;Users&#x2F;DLM&#x2F;.ssh&#x2F;id_rsa)</p></blockquote><p>复制ssh公钥</p><blockquote><p>$ clip&lt; ~&#x2F;.ssh&#x2F;id_rsa.pub</p></blockquote><p>然后到github上面，点击Settings<br><img src="/images/201506211.png"></p><p>点击SSH keys<br><img src="/images/201506212.jpg"></p><p>点击Add SSH key<br><img src="/images/201506213.png"></p><p>输入Title，作为这个key的描述，然后这个Key就是刚刚拷贝的，你直接粘贴就好<br><img src="/images/201506214.png"></p><p>最后测试一下是否成功了</p><blockquote><p>$ ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a><br>The authenticity of host ‘github.com (192.30.252.129)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes&#x2F;no)? yew<br>Please type ‘yes’ or ‘no’: yes<br>Warning: Permanently added ‘github.com,192.30.252.129’ (RSA) to the list of know<br>n hosts.<br>Hi dengliming! You’ve successfully authenticated, but GitHub does not provide sh<br>ell access.</p></blockquote><p>这个说明已经成功了。</p><p>最后进入blog目录，生成静态页面</p><blockquote><p>hexo clean</p></blockquote><p>最后，通过命令进行部署。</p><blockquote><p>hexo deploy</p></blockquote><p>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：<br><a href="http://yourname.github.io/">http://yourname.github.io/</a></p><p>以后发布博客的部署步骤<br>hexo clean<br>hexo generate<br>hexo deploy</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;今天终于开通了我的博客，这是一个全新的开始。&quot;&gt;&lt;a href=&quot;#今天终于开通了我的博客，这是一个全新的开始。&quot; class=&quot;headerlink&quot; title=&quot;今天终于开通了我的博客，这是一个全新的开始。&quot;&gt;&lt;/a&gt;今天终于开通了我的博客，这是一个全新的开始。&lt;/h1&gt;&lt;p&gt;下面是我搭建独立博客的过程</summary>
    
    
    
    <category term="notes" scheme="https://dengliming.github.io/categories/notes/"/>
    
    
    <category term="hexo" scheme="https://dengliming.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
